variables:
  SOURCES_URI: "https://github.com/Elektrobit/"
  ELOS_DEPENDENCY_CONFIG: "ci/dependencies_emlix.json"
  DOCKER_IMAGE: elos-ci:$CI_COMMIT_REF_SLUG
  ASMCOV_URI: "not available"
  DOCKER_HOST: "tcp://docker:2375"

stages:
  - docker-image
  - build
  - test

default:
  image: ubuntu:jammy
  services:
    - name: docker:24-dind
      alias: docker
      variables:
        DOCKER_TLS_CERTDIR: ""
  tags:
      - "docker"

before_script:
  - apt-get update
  - apt-get install -y curl bash jq docker.io
  - env

build-docker-image:
  stage: docker-image
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE -f ci/Dockerfile
             --build-arg UID=$(id -u) --build-arg GID=$(id -g)
             --build-arg ASMCOV_URI="$ASMCOV_URI"
             ci/
    - docker tag $DOCKER_IMAGE $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
    - docker push $CI_REGISTRY_IMAGE/$DOCKER_IMAGE

build-dependencies:
  stage: build
  needs:
    - build-docker-image
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/install_deps.py -c ci/dependencies_emlix.json
  artifacts:
    expire_in: 1 day
    paths:
      - build/deps/
    exclude:
      - build/deps/src/
      - build/deps/build/

build-release:
  stage: build
  needs:
    - build-docker-image
    - build-dependencies
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/build.sh --ci Release
  artifacts:
    paths:
      - build/Release/dist/
      - build/Release/cmake/
      - build/Release/result/build_log.txt

build-debug:
  stage: build
  needs:
    - build-docker-image
    - build-dependencies
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/build.sh --ci Debug
  artifacts:
    paths:
      - build/Debug/dist/
      - build/Debug/cmake/
      - build/Debug/result/build_log.txt

integration-tests:
  stage: test
  needs: []
  variables:
    BUILD_ARG: "--build-arg USER=gitlab-runner"
    DOCKER_BUILDKIT: 0
    BUILD_ID: $CI_JOB_ID
    GIT_COMMIT: $CI_COMMIT_SHORT_SHA
  script:
    - ci/run_integration_tests.sh Release
  artifacts:
    when: always
    paths:
      - build/Release/result/integration/

baseos-lab-tests:
  stage: test
  needs: []
  variables:
    BRANCH_NAME: $CI_COMMIT_REF_NAME
  script:
    - ci/trigger_jenkins_ci.sh

unit-test-release:
  stage: test
  needs:
    - build-docker-image
    - build-dependencies
    - build-release
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/run_utest.sh Release
  artifacts:
    when: always
    paths:
      - build/Release/result/unit_test/
    reports:
      junit: build/Release/result/unit_test/junit.xml

unit-test-debug:
  stage: test
  needs:
    - build-docker-image
    - build-dependencies
    - build-debug
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/run_utest.sh Debug
  artifacts:
    when: always
    paths:
      - build/Debug/result/unit_test/
    reports:
      junit: build/Debug/result/unit_test/junit.xml

smoke-test-release:
  stage: test
  needs:
    - build-docker-image
    - build-dependencies
    - build-release
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/run_smoketests.sh Release
  artifacts:
    when: always
    paths:
      - build/Release/result/smoketest_results/

smoke-test-debug:
  stage: test
  needs:
    - build-docker-image
    - build-dependencies
    - build-debug
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/run_smoketests.sh Debug
  artifacts:
    when: always
    paths:
      - build/Debug/result/smoketest_results/

code-lint:
  stage: test
  needs:
    - build-docker-image
    - build-dependencies
    - build-release
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/code_lint.py --ci
    - ci/checklicense.sh
  artifacts:
    when: always
    paths:
      - build/Release/cmake/lint_results/

benchmark:
  stage: test
  needs:
    - build-docker-image
    - build-dependencies
    - build-release
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/run_benchmarks.sh Release
  artifacts:
    when: always
    paths:
      - build/Release/result/benchmark_results/

code-coverage:
  rules:
    - when: never
      allow_failure: true
  stage: test
  needs:
    - build-docker-image
    - build-dependencies
    - build-release
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/create_coverage.sh
  artifacts:
    when: always
    paths:
      - build/Release/cmake/coverage_results/

publish-kpis:
  rules:
    - when: never
      allow_failure: true
  needs:
    - build-docker-image
    - benchmark
    - code-coverage
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/publish_pkis.sh

documentation:
  stage: build
  needs:
    - build-docker-image
    - build-dependencies
    - build-debug
  image: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE
  script:
    - ci/build_doc.sh
  artifacts:
    paths:
      - build/Debug/doc/

build-deb-packages:
  parallel:
    matrix:
      - OS: ubuntu
        CODENAME: jammy
      - OS: ubuntu
        CODENAME: noble
  # Override default before_script
  before_script: ""
  stage: build
  image: ${OS}:${CODENAME}
  script:
    - ci/build_debs.sh ${CODENAME}
  artifacts:
    paths:
      - ./*.deb
