@startuml
skinparam linetype polyline

object "libFunction.c" as libFunc_c {
	function()
	dependency()
}
object "libFunction.o" as libFunc_o {
	function()
	dependency()
}
object "libFunction.a" as libFunc_a {
	function()
	dependency()
}

libFunc_c .> libFunc_c /': depends on ""dependency()""'/
libFunc_c --> libFunc_o : compile
libFunc_o --> libFunc_a : link to static object

object "utestDoSomething.c" as utestDoSome_c {
	testDoSomething()
}
object "utestDoSomething.o" as utestDoSome_o {
	testDoSomething()
}
object "utestDoSomething" as utestDoSome_bin {
	testDoSomething()
	function()
	'dependency()
	dependency() // mocked
}

utestDoSome_c .> libFunc_c : tests ""function()""
utestDoSome_c .> mockLibFunc_c : uses mocked dependencies
utestDoSome_c --> utestDoSome_o : compile
utestDoSome_o --> utestDoSome_bin : link to test binary

object "mockLibFunction.c" as mockLibFunc_c {
	dependency() // mocked
}
object "mockLibFunction.o" as mockLibFunc_o {
	dependency() // mocked
}

mockLibFunc_c --> mockLibFunc_o : compile

libFunc_a -> utestDoSome_bin : link ""function()"" to test
mockLibFunc_o -> utestDoSome_bin : link mocked dependencies to test

libFunc_c -[hidden]-> libFunc_o
libFunc_o -[hidden]-> libFunc_a

mockLibFunc_c -[hidden]-> mockLibFunc_o

libFunc_c -[hidden]> utestDoSome_c
utestDoSome_c -[hidden]> mockLibFunc_c

libFunc_o -[hidden]> utestDoSome_o
utestDoSome_o -[hidden]> mockLibFunc_o

libFunc_a -[hidden]> utestDoSome_bin

@enduml
