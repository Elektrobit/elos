@startuml
skinparam linetype polyline

object "libDependency.c" as libDeb_c {
	dependency()
}
object "libDependency.o" as libDeb_o {
	dependency()
}
object "libDependency.so" as libDeb_so {
	dependency()
}
object "libDependency.a" as libDeb_a {
	dependency()
}

object "libFunction.c" as libFunc_c {
	function()
}
object "libFunction.o" as libFunc_o {
	function()
}
object "libFunction_wrap.so" as libFuncWrap_so {
	function()
	 â†³ calles __wrap_dependency()
}
object "libFunction.so" as libFunc_so {
	function()
}
object "libFunction.a" as libFunc_a {
	function()
}

object "utestDoSomething.c" as utestDoSome_c {
	testDoSomething()
}
object "utestDoSomething.o" as utestDoSome_o {
	testDoSomething()
}
object "utestDoSomething" as utestDoSome_bin {
	testDoSomething()
	function()
	__real_dependency() // from libFunction
	__wrap_dependency() // from mockLibFunction
}

object "mockLibFunction.c" as mockLibFunc_c {
	__wrap_dependency() // mocked
}
object "mockLibFunction.o" as mockLibFunc_o {
	__wrap_dependency() // mocked
}
object "mockLibFunction.so" as mockLibFunc_so {
	__wrap_dependency() // mocked
}
object "mockLibFunction.a" as mockLibFunc_a {
	__wrap_dependency() // mocked
}

' # Order the elements

libDeb_c -[hidden]-> libDeb_o
libDeb_o -[hidden]-> libDeb_a
libDeb_o -[hidden]-> libDeb_so

libFunc_c -[hidden]-> libFunc_o
libFunc_o -[hidden]-> libFunc_a
libFunc_o -[hidden]-> libFunc_so
libFunc_o -[hidden]-> libFuncWrap_so

utestDoSome_c -[hidden]-> utestDoSome_o
utestDoSome_o -[hidden]-> utestDoSome_bin

mockLibFunc_c -[hidden]-> mockLibFunc_o
mockLibFunc_o -[hidden]-> mockLibFunc_a
mockLibFunc_o -[hidden]-> mockLibFunc_so


libDeb_c -[hidden]> libFunc_c
libFunc_c -[hidden]> utestDoSome_c
utestDoSome_c -[hidden]> mockLibFunc_c

libDeb_o -[hidden]> libFunc_o
libFunc_o -[hidden]> utestDoSome_o
utestDoSome_o -[hidden]> mockLibFunc_o

libDeb_so -[hidden]> libDeb_a
'libDeb_so -[hidden]> libFunc_so
'libDeb_so -[hidden]> libFunc_a
'libDeb_a -[hidden]> libFunc_so
libDeb_a -[hidden]> libFuncWrap_so
'libDeb_a -[hidden]> libFunc_a
libFuncWrap_so -[hidden]> libFunc_so
libFunc_so -[hidden]> libFunc_a
'libFunc_so -[hidden]> utestDoSome_bin
libFunc_a -[hidden]> utestDoSome_bin
utestDoSome_bin -[hidden]> mockLibFunc_so
'utestDoSome_bin -[hidden]> mockLibFunc_a
mockLibFunc_so -[hidden]> mockLibFunc_a

' # The Links between the objects/source files/binaries

'libFunc_c .> libDeb_c : depends on ""dependency()""
libDeb_c <. libFunc_c : depends on ""dependency()""
utestDoSome_c .> libFunc_c : tests ""function()""
utestDoSome_c .> mockLibFunc_c : uses mocked dependencies

libDeb_c --> libDeb_o : compile
libDeb_o --> libDeb_so : link to shared object
libDeb_o --> libDeb_a : link to static object


libFunc_c --> libFunc_o : compile
libFunc_o --> libFuncWrap_so : link to shared object\nwith --wrap=dependency
libFunc_o --> libFunc_so : link to shared object
libFunc_o --> libFunc_a : link to static object

utestDoSome_c --> utestDoSome_o : compile
utestDoSome_o --> utestDoSome_bin : link to test binary

mockLibFunc_c --> mockLibFunc_o : compile
mockLibFunc_o --> mockLibFunc_so : link to shared object
mockLibFunc_o --> mockLibFunc_a : link to static object

'libFunc_a --> utestDoSome_bin : link ""function()"" to test
'mockLibFunc_so --> utestDoSome_bin : link mocked dependencies to test

@enduml
