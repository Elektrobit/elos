@startuml
skinparam linetype polyline

object "libDependency.c" as libDep_c {
	dependency()
}
object "libDependency.o" as libDep_o {
	dependency()
}
object "libDependency.so" as libDep_so {
	dependency()
}
object "libDependency.a" as libDep_a {
	dependency()
}

object "libFunction.c" as libFunc_c {
	function()
}
object "libFunction.o" as libFunc_o {
	function()
}
object "libFunction.so" as libFunc_so {
	function()
}
object "libFunction.a" as libFunc_a {
	function()
}

object "utestDoSomething.c" as utestDoSome_c {
	testDoSomething()
}
object "utestDoSomething.o" as utestDoSome_o {
	testDoSomething()
}
object "utestDoSomething" as utestDoSome_bin {
	testDoSomething()
	function()
	dependency()
	dependency() // mocked
}

object "mockLibDependency.c" as mockLibDep_c {
	dependency() // mocked
}
object "mockLibDependency.o" as mockLibDep_o {
	dependency() // mocked
}
object "mockLibDependency.so" as mockLibDep_so {
	dependency() // mocked
}
object "mockLibDependency.a" as mockLibDep_a {
	dependency() // mocked
}

' # Order the elements

libDep_c -[hidden]-> libDep_o
libDep_o -[hidden]-> libDep_a
libDep_o -[hidden]-> libDep_so

libFunc_c -[hidden]-> libFunc_o
libFunc_o -[hidden]-> libFunc_a
libFunc_o -[hidden]-> libFunc_so

utestDoSome_c -[hidden]-> utestDoSome_o
utestDoSome_o -[hidden]-> utestDoSome_bin

mockLibDep_c -[hidden]-> mockLibDep_o
mockLibDep_o -[hidden]-> mockLibDep_a
mockLibDep_o -[hidden]-> mockLibDep_so


libDep_c -[hidden]> libFunc_c
libFunc_c -[hidden]> utestDoSome_c
utestDoSome_c -[hidden]> mockLibDep_c

libDep_o -[hidden]> libFunc_o
libFunc_o -[hidden]> utestDoSome_o
utestDoSome_o -[hidden]> mockLibDep_o

libDep_so -[hidden]> libDep_a
'libDep_so -[hidden]> libFunc_so
'libDep_so -[hidden]> libFunc_a
libDep_a -[hidden]> libFunc_so
'libDep_a -[hidden]> libFunc_a
libFunc_so -[hidden]> libFunc_a
'libFunc_so -[hidden]> utestDoSome_bin
libFunc_a -[hidden]> utestDoSome_bin
utestDoSome_bin -[hidden]> mockLibDep_so
'utestDoSome_bin -[hidden]> mockLibDep_a
mockLibDep_so -[hidden]> mockLibDep_a

' # The Links between the objects/source files/binaries

'libFunc_c .> libDep_c : depends on ""dependency()""
libDep_c <. libFunc_c : depends on ""dependency()""
utestDoSome_c .> libFunc_c : tests ""function()""
utestDoSome_c .> mockLibDep_c : uses mocked dependencies

libDep_c --> libDep_o : compile
libDep_o --> libDep_so : link to shared object
libDep_o --> libDep_a : link to static object


libFunc_c --> libFunc_o : compile
libFunc_o --> libFunc_so : link to shared object
libFunc_o --> libFunc_a : link to static object

utestDoSome_c --> utestDoSome_o : compile
utestDoSome_o --> utestDoSome_bin : link to test binary

mockLibDep_c --> mockLibDep_o : compile
mockLibDep_o --> mockLibDep_so : link to shared object
mockLibDep_o --> mockLibDep_a : link to static object

'libFunc_a --> utestDoSome_bin : link ""function()"" to test
'mockLibDep_so --> utestDoSome_bin : link mocked dependencies to test

@enduml
